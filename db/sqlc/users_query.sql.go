// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users_query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ("username",
                   "phone_number",
                   "password")
VALUES ($1, $2, $3) RETURNING id, username, phone_number, password, role, is_banned, created_at
`

type CreateUserParams struct {
	Username    string
	PhoneNumber string
	Password    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PhoneNumber, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const partialUpdateUser = `-- name: PartialUpdateUser :one
UPDATE users
SET username = CASE WHEN $1::boolean THEN $2::TEXT ELSE username END,
    phone_number  = CASE WHEN $3::boolean THEN $4::TEXT ELSE phone_number END,
    password  = CASE WHEN $5::boolean THEN $6::TEXT ELSE password END
WHERE id = $7
RETURNING id, username, phone_number, password, role, is_banned, created_at
`

type PartialUpdateUserParams struct {
	UpdateUsername    bool
	Username          string
	UpdatePhoneNumber bool
	PhoneNumber       string
	UpdatePassword    bool
	Password          string
	ID                int64
}

func (q *Queries) PartialUpdateUser(ctx context.Context, arg PartialUpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, partialUpdateUser,
		arg.UpdateUsername,
		arg.Username,
		arg.UpdatePhoneNumber,
		arg.PhoneNumber,
		arg.UpdatePassword,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}
