// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users_query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ("username",
                   "phone_number",
                   "password")
VALUES ($1, $2, $3) RETURNING id, username, phone_number, password, role, created_at
`

type CreateUserParams struct {
	Username    string
	PhoneNumber string
	Password    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PhoneNumber, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username     = $2,
    phone_number = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int64
	Username    string
	PhoneNumber string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Username, arg.PhoneNumber)
	return err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users
SET phone_number = $2
WHERE id = $1 RETURNING id, username, phone_number, password, role, created_at
`

type UpdateUserPhoneParams struct {
	ID          int64
	PhoneNumber string
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPhone, arg.ID, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE users
SET username = $2
WHERE id = $1
    RETURNING id, username, phone_number, password, role, created_at
`

type UpdateUsernameParams struct {
	ID       int64
	Username string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
